{"version":3,"sources":["components/formComponent.js","components/apiComponent.js","App.js","serviceWorker.js","index.js","star.svg"],"names":["useState","selectedDate","setSelectedDate","dateError","setDateError","age","setAge","nombre","setNombre","nombreError","setNombreError","apellido","setApellido","apellidoError","setApellidoError","correo","setCorreo","correoError","setCorreoError","className","type","placeholder","onChange","e","target","value","style","display","selected","date","moment","diff","placeholderText","maxDate","Date","marginTop","onClick","test","items","setItems","width","margin","page","Math","floor","random","fetch","then","res","json","result","breakpointCols","default","1100","700","500","columnClassName","map","item","i","key","src","download_url","author","height","App","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.f63e599d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Datepicker from 'react-datepicker';\nimport moment from 'moment';\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nexport default () =>{\n  const [selectedDate, setSelectedDate] = useState('');\n  const [dateError, setDateError] = useState('');\n  const [age, setAge] = useState('');\n  const [nombre, setNombre] = useState('');\n  const [nombreError, setNombreError] = useState('');\n  const [apellido, setApellido] = useState('');\n  const [apellidoError, setApellidoError] = useState('');\n  const [correo, setCorreo] = useState('');\n  const [correoError, setCorreoError] = useState('');\n  const handleDateChange = date => {\n    if (date !== null) {\n      setAge(moment().diff(date, 'years'));\n      setSelectedDate(date);\n    }\n  }\n  const handleClick = () => {\n    if(nombre === '') {\n      setNombreError('Debe ingresar sus nombres');\n    } else if (!(/^[^\\s]+\\s[^\\s]+$/.test(nombre))) { \n      setNombreError('Debe ingresar dos nombres');\n    } else {\n      setNombreError('');\n    }\n    if(selectedDate === '') {\n      setDateError('Debe ingresar su fecha de nacimiento');\n    } else {\n      setDateError('');\n    }\n    if(apellido === '') {\n      setApellidoError('Debe ingresar sus apellidos');\n    } else if (!(/^[^\\s]+\\s[^\\s]+$/.test(apellido))) { \n      setApellidoError('Debe ingresar dos apellidos');\n    } else {\n      setApellidoError('');\n    }\n    if(correo === '') {\n      setCorreoError('Debe ingresar su correo');\n    } else if (!(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(correo))) {\n      setCorreoError('Debe ingresar un correo válido');\n    } else {\n      setCorreoError('');\n    }\n\n  }\n  return (\n    <div className=\"form\">\n      <div className=\"input-group\">\n        <input type=\"text\" placeholder=\"Nombres\" onChange={e => setNombre(e.target.value)}></input>\n        <div style={{display: 'inline-block'}}>\n          <Datepicker\n            selected={selectedDate}\n            onChange={handleDateChange}\n            placeholderText=\"Fecha de nacimiento\"\n            maxDate= {new Date()} />\n        {age !== '' && \n        <div className=\"edad\"><span>Tu edad es: {age} años</span></div>\n        }\n        </div>\n      </div>\n      <div className=\"input-group\">\n        <input type=\"text\" placeholder=\"Apellidos\"  onChange={e => setApellido(e.target.value)}></input>\n        <input type=\"text\" placeholder=\"Correo\"  onChange={e => setCorreo(e.target.value)}></input>\n      </div>\n      <div style={{marginTop: '5px'}}>\n      {nombreError !== '' && \n        <div className=\"error\">{nombreError}</div>\n      }\n      {dateError !== '' && \n        <div className=\"error\">{dateError}</div>\n      }\n      {apellidoError !== '' && \n        <div className=\"error\">{apellidoError}</div>\n      }\n      {correoError !== '' && \n        <div className=\"error\">{correoError}</div>\n      }\n      </div>\n      <div style={{marginTop: '25px'}}>\n        <div className=\"button validate\" onClick={handleClick}>Validar</div>\n      </div>\n    </div>\n  )\n}","import React, { useState, useEffect } from 'react';\nimport Masonry from 'react-masonry-css';\n\nexport default () => {\n  const [items, setItems] = useState([]);\n  const breakpointColumnsObj = {\n    default: 4,\n    1100: 3,\n    700: 2,\n    500:1\n  };  \n  const handleClick = () => {\n    const page = Math.floor(Math.random() * 33) + 1;\n    fetch(`https://picsum.photos/v2/list?page=${page}`)\n      .then(res => res.json())\n      .then(result => setItems(result))\n  }\n  return(\n  <div style={{width:\"75%\", margin:\"auto\"}}>\n    <div style={{marginTop: '25px'}}>\n      <div className=\"button api\" onClick={handleClick}>Consultar API</div>\n    </div>\n    <Masonry\n      breakpointCols={breakpointColumnsObj}\n      className=\"my-masonry-grid\"\n      columnClassName=\"my-masonry-grid_column\">\n      {items.map((item, i) => \n        <div className=\"masonry-el\" key={i}>\n          <img src={item.download_url} style={{width: \"100%\"}} />\n          <div style={{margin: '3px'}}>\n            <span className=\"descriptor\">Autor: </span>\n            {item.author}\n          </div>\n          <div style={{margin: '3px'}}>\n            <span className=\"descriptor\">Alto: </span>\n            {item.height}px\n          </div>\n          <div style={{margin: '3px'}}>\n            <span className=\"descriptor\">Ancho: </span>\n            {item.width}px\n          </div>\n        </div>\n      )}\n    </Masonry>\n  </div>\n  )\n}","import React from 'react';\nimport FormComponent from './components/formComponent';\nimport ApiComponent from './components/apiComponent';\nimport logo from './star.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      <div style={{marginTop: '20px'}}>\n        <FormComponent />\n      </div>\n      <ApiComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/star.4893a554.svg\";"],"sourceRoot":""}